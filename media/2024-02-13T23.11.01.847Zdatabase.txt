select column or all columns by* from table name
where(if) condition 
order by(arrangement by ...) 


//
we can change the column name during selecting by as
like
select lastname as nick name from customer
//
when i want select unique list 
select distinct lastname from customer
//
logic gates 
select * from customer
where condition or/and  condition
if multiple logixcal operators
the priority
and then or

///
in operator
select any value in in operator
like
where name in('ali,'mohamed')
select any record have name ali or mohamed

 use
where name not in('ali,'mohamed')
///
between operator
 select value between two value 
like   
 where number between 5 and 9
any number between 5 and 9 selected
///
like operator
where name like 'a%' that mean any name start letter a
where name like '_a'that mean any name the secend letter is a
where name like '__a'that mean any name the third letter is a
in general
% any number of letter
_ single letter

//
regexp
where name regexp'a' searching for any word have a
in general
where name regexp'^a' any word start a
where name regexp'a$' any word end a
where name regexp'a|b' any word has a or has b
where name regexp'[nm]a' that any word has na or ma
where name regexp'[a-h]a' a-h mean range between a and h like
aa or ba or ca or .... or ha


//
NULL

where city is null
where city is not null


///
order
order by name desc descreament
order by name asc increament default
order by name ,birth_day
we can order by no. of columns
like
order by 1,2

//////

limit select first no of numbers
select * from customers
limit 3 select first 3 record
limit 6,3 that mean select 3 records after the sixth record

/////
inner joins 

select * from customers
join orders
on order.id=customer.id

/////
implicit join syntax

select * from customers,orders
where 
order.id=customer.id

////
self join 

let me make loop in column
SELECT a.ID, b.NAME, a.SALARY
FROM CUSTOMERS a, CUSTOMERS b
WHERE a.SALARY < b.SALARY;

////
outer joins
left join return all records in left table(customers) even if not achieve condition
right join return all records in right table(orders) even if not achieve condition

SELECT a.ID, b.NAME, a.SALARY
FROM CUSTOMERS a
left(right) join orders b
on a.SALARY < b.SALARY;




///
using() that query
SELECT a.ID, b.NAME, a.SALARY
FROM CUSTOMERS a
join CUSTOMERS b
using(salary)///WHERE a.SALARY < b.SALARY;

//////
unions
points<2000 broze
>200 silver
>3000 gold
select id,name,points
,'bronze' as type 
from customers
where points<2000
union
select id,name,points
,'silver'  
from customers
where points>2000
union
select id,name,points
,'gold'  
from customers
where points>3000

/////
attribute columns
insert into table
insert into customers
values(, , , ,)

insert into customers() i can insert what i want but be careful arrangement 
values(, , , ,)

// insert multiple rows
insert into customer()
values(),
      (),
      ()


//
subquery
insert into customer (select * from employee where id>5)

////////
//create new table and copy rows from old table
create table orderaddress as
select * from orders 



///
updating
update customers
set customerName='ali',date='2019-8-10'
where id<10

///
deleting row
delete from customers // if stop here we delete all rows
where condition
 


///
create database 
1- create database mydata;
or
create scheme 'mydata';



// used database
use mydata;


//to see tables
show tables


//to see our databases
show databases



// content table
describe clients



//delete database
drop database mydata



//create table


CREATE TABLE `mydatabase`.`clients` (      //'mydatabase'. optional
 -- `id` INT NOT NULL AUTO_INCREMENT,
 -- `first_name` VARCHAR(45) NOT NULL,
 -- `last_name` VARCHAR(45) NOT NULL,
 -- `birth_day` VARCHAR(45) NULL,
  -- `phone` VARCHAR(45) NULL,
  -- `city` VARCHAR(45) NOT NULL,
  -- PRIMARY KEY (`id`)
);


//alter table   //that mean modification in table structure

alter table tableName
rename to new_tableName;   // rename tablename


alter table tableName
rename column old_name to new_name;   // rename the column   



alter table tableName
modify column column_name type;  //modify datatype


alter table tableName
add column_name column_definition (type);  //to add column and defined it



alter table tableName
add(
 column_name column_definition (type),
 column_name column_definition (type),		// to add columns and defined them 
 column_name column_definition (type)
);

alter table tableName
drop column column_name ; 		// to delete columns


alter table table_name (child) 
add constraint constraint_name foreign key(column//in child table)
references parent table (column // in parent table);  //to add constraint




//// delete table

drop table table_name;



///// contraints





 


























